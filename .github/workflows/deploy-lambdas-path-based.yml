name: Deploy Lambda Functions (Path-Based)

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  NODE_VERSION: '22'

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      hello-world: ${{ steps.changes.outputs.hello-world }}
      sessions-validator: ${{ steps.changes.outputs.sessions-validator }}
      session-validation: ${{ steps.changes.outputs.session-validation }}
      auth-service: ${{ steps.changes.outputs.auth-service }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            hello-world:
              - 'src/hello-world/**'
            sessions-validator:
              - 'src/sessions-validator/**'
            session-validation:
              - 'src/session-validation/**'
            auth-service:
              - 'src/auth_service/**'

  test-hello-world:
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.hello-world == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install dependencies
        run: |
          cd src/hello-world
          npm ci
      
      - name: Build
        run: |
          cd src/hello-world
          npm run build

  test-sessions-validator:
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.sessions-validator == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install dependencies
        run: |
          cd src/sessions-validator
          npm ci
      
      - name: Build
        run: |
          cd src/sessions-validator
          npm run build
      
      - name: Run tests
        run: |
          cd src/sessions-validator
          npm test -- --passWithNoTests

  test-auth-service:
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.auth-service == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install dependencies
        run: |
          cd src/auth_service
          npm ci
      
      - name: Build
        run: |
          cd src/auth_service
          npm run build

  deploy-hello-world:
    needs: [detect-changes, test-hello-world]
    if: ${{ needs.detect-changes.outputs.hello-world == 'true' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_GITHUB_ACTIONS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Install dependencies
        run: |
          cd src/hello-world
          npm ci
      
      - name: Build
        run: |
          cd src/hello-world
          npm run build
      
      - name: Create deployment package
        run: |
          cd src/hello-world
          mkdir -p deployment
          cp -r build/* deployment/
          cp package.json deployment/
          cd deployment
          npm install --production
          zip -r hello-world-lambda.zip .
      
      - name: Deploy to Lambda
        run: |
          cd src/hello-world/deployment
          aws lambda update-function-code \
            --function-name peptide-tracker-hello-world-dev \
            --zip-file fileb://hello-world-lambda.zip \
            --region ${{ env.AWS_REGION }} || \
          aws lambda create-function \
            --function-name peptide-tracker-hello-world-dev \
            --runtime nodejs22.x \
            --role ${{ secrets.AWS_LAMBDA_ROLE_ARN }} \
            --handler index.handler \
            --zip-file fileb://hello-world-lambda.zip \
            --region ${{ env.AWS_REGION }}
      
      - name: Cleanup
        run: |
          cd src/hello-world
          rm -rf deployment

  deploy-sessions-validator:
    needs: [detect-changes, test-sessions-validator]
    if: ${{ needs.detect-changes.outputs.sessions-validator == 'true' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_GITHUB_ACTIONS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Install dependencies
        run: |
          cd src/sessions-validator
          npm ci
      
      - name: Build
        run: |
          cd src/sessions-validator
          npm run build
      
      - name: Create deployment package
        run: |
          cd src/sessions-validator
          mkdir -p deployment
          cp -r build/* deployment/
          cp package.json deployment/
          cd deployment
          npm install --production
          zip -r sessions-validator-lambda.zip .
      
      - name: Deploy to Lambda
        run: |
          cd src/sessions-validator/deployment
          aws lambda update-function-code \
            --function-name peptide-tracker-sessions-validator-dev \
            --zip-file fileb://sessions-validator-lambda.zip \
            --region ${{ env.AWS_REGION }} || \
          aws lambda create-function \
            --function-name peptide-tracker-sessions-validator-dev \
            --runtime nodejs22.x \
            --role ${{ secrets.AWS_LAMBDA_ROLE_ARN }} \
            --handler index.handler \
            --zip-file fileb://sessions-validator-lambda.zip \
            --region ${{ env.AWS_REGION }}
      
      - name: Cleanup
        run: |
          cd src/sessions-validator
          rm -rf deployment

  test-session-validation:
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.session-validation == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install dependencies
        run: |
          cd src/session-validation
          npm ci
      
      - name: Build
        run: |
          cd src/session-validation
          npm run build
      
      - name: Run tests
        run: |
          cd src/session-validation
          npm test

  deploy-session-validation:
    needs: [detect-changes, test-session-validation]
    if: ${{ needs.detect-changes.outputs.session-validation == 'true' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_GITHUB_ACTIONS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Install dependencies
        run: |
          cd src/session-validation
          npm ci
      
      - name: Build
        run: |
          cd src/session-validation
          npm run build
      
      - name: Create deployment package
        run: |
          cd src/session-validation
          mkdir -p deployment
          cp -r build/* deployment/
          cp package.json deployment/
          cd deployment
          npm install --production
          zip -r session-validation-lambda.zip .
      
      - name: Deploy to Lambda
        run: |
          cd src/session-validation/deployment
          aws lambda update-function-code \
            --function-name peptide-tracker-session-validation-dev \
            --zip-file fileb://session-validation-lambda.zip \
            --region ${{ env.AWS_REGION }} || \
          aws lambda create-function \
            --function-name peptide-tracker-session-validation-dev \
            --runtime nodejs22.x \
            --role ${{ secrets.AWS_LAMBDA_ROLE_ARN }} \
            --handler index.handler \
            --zip-file fileb://session-validation-lambda.zip \
            --region ${{ env.AWS_REGION }}
      
      - name: Cleanup
        run: |
          cd src/session-validation
          rm -rf deployment

  deploy-auth-service:
    needs: [detect-changes, test-auth-service]
    if: ${{ needs.detect-changes.outputs.auth-service == 'true' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_GITHUB_ACTIONS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Install dependencies
        run: |
          cd src/auth_service
          npm ci
      
      - name: Build
        run: |
          cd src/auth_service
          npm run build
      
      - name: Create deployment package
        run: |
          cd src/auth_service
          mkdir -p deployment
          cp -r build/* deployment/
          cp package.json deployment/
          cd deployment
          npm install --production
          zip -r auth-service-lambda.zip .
      
      - name: Deploy to Lambda
        run: |
          cd src/auth_service/deployment
          aws lambda update-function-code \
            --function-name peptide-tracker-auth-service-dev \
            --zip-file fileb://auth-service-lambda.zip \
            --region ${{ env.AWS_REGION }} || \
          aws lambda create-function \
            --function-name peptide-tracker-auth-service-dev \
            --runtime nodejs22.x \
            --role ${{ secrets.AWS_LAMBDA_ROLE_ARN }} \
            --handler index.handler \
            --zip-file fileb://auth-service-lambda.zip \
            --region ${{ env.AWS_REGION }}
      
      - name: Cleanup
        run: |
          cd src/auth_service
          rm -rf deployment

  deployment-summary:
    needs: [detect-changes, deploy-hello-world, deploy-sessions-validator, deploy-auth-service]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Deployment Summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Function | Changed | Deployed |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|---------|----------|" >> $GITHUB_STEP_SUMMARY
          echo "| hello-world | ${{ needs.detect-changes.outputs.hello-world }} | ${{ needs.deploy-hello-world.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| sessions-validator | ${{ needs.detect-changes.outputs.sessions-validator }} | ${{ needs.deploy-sessions-validator.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| auth-service | ${{ needs.detect-changes.outputs.auth-service }} | ${{ needs.deploy-auth-service.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Legend:**" >> $GITHUB_STEP_SUMMARY
          echo "- Changed: true/false" >> $GITHUB_STEP_SUMMARY
          echo "- Deployed: success/skipped/failure" >> $GITHUB_STEP_SUMMARY
