# Local Terraform setup for development and credential management
# This file handles local development setup and credential validation

terraform {
  required_version = ">= 1.0"
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
    github = {
      source  = "integrations/github"
      version = "~> 5.0"
    }
  }
}

# Data sources for current AWS account info
data "aws_caller_identity" "current" {}
data "aws_region" "current" {}

# Data source for GitHub repository
data "github_repository" "main" {
  name = "PeptideTracker-Lambda-APIs"
}

# Local values for common configuration
locals {
  # Get AWS credentials from environment or AWS CLI config
  aws_access_key_id     = var.aws_access_key_id != "" ? var.aws_access_key_id : null
  aws_secret_access_key = var.aws_secret_access_key != "" ? var.aws_secret_access_key : null
  
  # Common tags
  common_tags = {
    Project     = "PeptideTracker"
    Environment = var.environment
    ManagedBy   = "Terraform"
    Repository  = "https://github.com/jamdahlaop/PeptideTracker-Lambda-APIs"
    CreatedBy   = "jamdahlaop"
  }
}

# Validate AWS credentials
resource "null_resource" "validate_aws_credentials" {
  provisioner "local-exec" {
    command = <<-EOT
      echo "🔍 Validating AWS credentials..."
      aws sts get-caller-identity
      echo "✅ AWS credentials are valid"
    EOT
  }
  
  triggers = {
    aws_region = var.aws_region
  }
}

# Validate GitHub CLI authentication
resource "null_resource" "validate_github_auth" {
  provisioner "local-exec" {
    command = <<-EOT
      echo "🔍 Validating GitHub CLI authentication..."
      gh auth status
      echo "✅ GitHub CLI is authenticated"
    EOT
  }
  
  depends_on = [null_resource.validate_aws_credentials]
}

# Create a local credentials file for the deployment scripts
resource "local_file" "aws_credentials" {
  count = var.create_local_credentials ? 1 : 0
  
  filename = "${path.module}/../.aws-credentials.env"
  content = <<-EOT
# AWS Credentials for Peptide Tracker Deployment
# Generated by Terraform on ${timestamp()}
# DO NOT COMMIT THIS FILE TO GIT

export AWS_ACCESS_KEY_ID="${local.aws_access_key_id}"
export AWS_SECRET_ACCESS_KEY="${local.aws_secret_access_key}"
export AWS_DEFAULT_REGION="${var.aws_region}"
export AWS_REGION="${var.aws_region}"

# GitHub Repository Info
export GITHUB_REPO="jamdahlaop/PeptideTracker-Lambda-APIs"
export GITHUB_OWNER="jamdahlaop"
EOT

  file_permission = "0600"  # Read/write for owner only
  
  depends_on = [
    null_resource.validate_aws_credentials,
    null_resource.validate_github_auth
  ]
}

# Create a deployment configuration file
resource "local_file" "deployment_config" {
  filename = "${path.module}/../deployment-config.json"
  content = jsonencode({
    aws_region     = var.aws_region
    environment    = var.environment
    project_name   = var.project_name
    github_repo    = "jamdahlaop/PeptideTracker-Lambda-APIs"
    github_owner   = "jamdahlaop"
    created_at     = timestamp()
    terraform_version = ">= 1.0"
  })
}

# Output current configuration
output "local_setup_info" {
  description = "Local setup information"
  value = {
    aws_account_id    = data.aws_caller_identity.current.account_id
    aws_region        = data.aws_region.current.name
    github_repo       = data.github_repository.main.full_name
    github_repo_url   = data.github_repository.main.html_url
    environment       = var.environment
    project_name      = var.project_name
  }
}

output "next_steps" {
  description = "Next steps for deployment"
  value = {
    step_1 = "Run: terraform apply -target=null_resource.validate_aws_credentials"
    step_2 = "Run: terraform apply -target=null_resource.validate_github_auth"
    step_3 = "Run: terraform apply to create local configuration"
    step_4 = "Run: ./scripts/deploy-complete.sh to deploy everything"
  }
}
